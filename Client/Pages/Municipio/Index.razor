@attribute [HubIcon(Icon.City, "Municípios")]
@inject MunicipioService municipioService
@inject CoreNavBarStore navBarStore
@inject CoreDialogService dialogService
@inject CoreNotificationService notificationService

<CoreCard>
    <CoreDataGrid Data="@Municipios">
        <HeaderTemplate>
            <CoreForm Model="@Model">
                <CoreRow>
                    <EditorFor Property="(model) => model.Nome" />
                </CoreRow>
                <CoreRow Actions>
                    <CoreButton ButtonType="ButtonType.Submit" Icon="Icon.Search" ToolTip="Buscar" Click="async () => await BuscarMunicipios()" />
                </CoreRow>
            </CoreForm>
        </HeaderTemplate>
        <Columns>
            <CoreDataGridColumn Property="(model) => model.CodigoIBGE" />
            <CoreDataGridColumn Property="(model) => model.Nome" />
            <CoreDataGridColumn Property="(model) => model.UF" />
            <CoreDataGridColumn ActionColumn>
                <Template Context="data">
                    <CoreButton ToolTip="Atualizar Receitas" Icon="Icon.PriceChange" Click="() => BuscarReceitas(data)" />
                    <CoreButton ToolTip="Dados do Município" Icon="Icon.Info" Click="() => MunicipioDados(data)" />
                </Template>
            </CoreDataGridColumn>
        </Columns>
    </CoreDataGrid>
</CoreCard>

@code {
    private SearchModel Model = new();

    private List<Municipio> Municipios { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetMunicipios();

        navBarStore.Titulo = "Municípios";

        navBarStore.SetItens(new CoreNavBarItem(Icon.Sync, AtualizarMunicipios, "Atualizar Municípios"));

        await base.OnInitializedAsync();
    }

    private void AtualizarMunicipios()
    {
        municipioService.RodarBackground(async () => await municipioService.AtualizarMunicipios());
        notificationService.Notify(NotificacaoTipo.Sucesso, "Foi criada uma Tarefa para atualização dos municípios, você pode conferir na seção de Tarefas.");
    }

    private async Task GetMunicipios()
    {
        Municipios = await municipioService.Listar() ?? [];
    }

    private async Task BuscarMunicipios()
    {
        Municipios = await municipioService.Buscar(Model.Nome) ?? [];
    }

    private void MunicipioDados(Municipio municipio)
        => dialogService.Open(typeof(MunicipioDados), $"Dados do Município: {municipio.FullName}", parameters: new { Municipio = municipio });

    private void BuscarReceitas(Municipio municipio)
        => dialogService.Open(typeof(AtualizarReceitas), $"Atualizar Receitas {municipio.FullName}", parameters: new { Municipio = municipio });

    private class SearchModel
    {
        public string? Nome { get; set; }
    }
}
