@inject CoreNavBarStore navBarStore
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inherits LayoutComponentBase
@implements IDisposable

<div class="page">
    <NavBar />
    <main>
        <article class="content px-4" style="background-color: #333333; min-height: 100%; padding: 1rem 0;">
            @Body
        </article>
    </main>
</div>

@* Loader *@
<CoreLoader />
<CoreUtils />

@code {

    protected override Task OnInitializedAsync()
    {
        navigationManager.LocationChanged += HandleLocationChanged!;

        List<CoreNavBarItem> itensAnteriores = new()
        {
            new CoreNavBarItem(Icon.Back, () => jsRuntime.InvokeVoidAsync("goBack"), "Voltar")
        };

        List<CoreNavBarItem> itensPosteriores = new()
        {
            new CoreNavBarItem(Icon.Home, "", "", "", "Início")
        };

        navBarStore.Initialize(itensAnteriores, itensPosteriores);

        HandleLocationChangedInternal();

        return base.OnInitializedAsync();
    }

    private void HandleLocationChanged(object sender, EventArgs e)
        => HandleLocationChangedInternal();

    private void HandleLocationChangedInternal()
        => navBarStore.SetItens();

    public void Dispose()
    {
        navigationManager.LocationChanged -= HandleLocationChanged!;
    }
}